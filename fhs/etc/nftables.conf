#!/usr/bin/nft -f
# `-rw-r--r-- root root /etc/nftables.conf`

# ipv4/ipv6 Simple & Safe Firewall
# you can find examples in /usr/share/nftables/

# Require: IP forwarding
# systemd `sysctl net.ipv4.ip_forward=1`

# Clear any previous ruleset.
flush ruleset

# List all IPs and IP ranges of your traffic filtering proxy source.
# x.x.x.x/xx,
# x.x.x.x/xx,
# x.x.x.x,
# x.x.x.x
define DNS_IPv4 = {
  
}
define DNS_IPv6 = {
  
}
define SAFE_TRAFFIC_IPv4 = {
  192.168.0.0
}

table nat {
  chain prerouting {
    type nat hook prerouting priority 0;
  }
  chain postrouting {
    type nat hook postrouting priority 100;
    oifname "<SERVER NETWORK DEVICE (0) GATEWAY>enp0s0" masquerade
  }
}

table inet filter {
  chain inbound {
    # By default, drop all traffic unless it meets a filter
    # criteria specified by the rules that follow below.
    type filter hook input priority 0
    policy drop

    # Allow established, related connections.
    ct state {established, related} accept

    # Early drop of invalid connections.
    ct state invalid drop

    # Allow from loopback.
    iifname lo accept

    # Allow all ICMP and IGMP traffic, but enforce a rate limit
    # to help prevent some types of flood attacks.
    # `ipv6-icmp` and `icmpv6` are aliases.
    ip protocol icmp limit rate 4/second accept
    ip6 nexthdr icmpv6 limit rate 4/second accept
    ip protocol igmp limit rate 4/second accept

    # Allow SSH (default port 22).
    # -- From `$SAFE_TRAFFIC_IPv4` ranges only
    # -- Prevent brute force.
    tcp dport <SSH PORT>22 ip saddr $SAFE_TRAFFIC_IPv4 limit rate 15/minute accept

    # Allow HTTP and HTTPS (port: 80, 443).
    tcp dport { http, https } accept
    udp dport { http, https } accept
    # HTTP and HTTPS drom approved IP ranges only.
    #tcp dport { http, https } ip saddr $SAFE_TRAFFIC_IPv4 accept
    #udp dport { http, https } ip saddr $SAFE_TRAFFIC_IPv4 accept

    # Allow DNS queries (port: 53).
    tcp sport 53 ip saddr $DNS_IPv4 accept
    udp sport 53 ip saddr $DNS_IPv4 accept
    tcp sport 53 ip6 saddr $DNS_IPv6 accept
    udp sport 53 ip6 saddr $DNS_IPv6 accept

    # Allow TFTP (port 69).
    udp dport tftp accept

    # Allow NFS.
    tcp dport 2049 accept

    # Uncomment to enable logging of denied inbound traffic
    #log prefix "[nftables] Inbound Denied: " flags all counter drop

    # Explicitly reject everything else. Comment to indicate that
    # any unqualified package has been "filtered". Packages that are "filtered"
    # provide little information to a potential attacker on what has happened.
    # * Nmap Network Scanning Chapter 15. Nmap Reference Guide [Port Scanning Basics](https://nmap.org/book/man-port-scanning-basics.html)
    #reject with icmpx type port-unreachable
  }
  chain forward {
    type filter hook forward priority 0
    # Drop everything if device is NOT a router.
    #policy drop
    # Allow traffic if device is a router.
    policy accept

    # Uncomment to enable logging of denied forwards
    #log prefix "[nftables] Forward Denied: " flags all counter drop

    # Allow packages from LAN to WAN, and from WAN to LAN if LAN initiated the connection.
    iifname "<SERVER NETWORK DEVICE (1)>enp1s0" oifname "<SERVER NETWORK DEVICE (0) GATEWAY>enp0s0" accept
    iifname "<SERVER NETWORK DEVICE (0) GATEWAY>enp0s0" oifname "<SERVER NETWORK DEVICE (1)>enp1s0" ct state {established,related} accept
    iifname "<SERVER NETWORK DEVICE (0) GATEWAY>enp0s0" oifname "<SERVER NETWORK DEVICE (1)>enp1s0" drop
    # ... Repeat for <SERVER NETWORK DEVICE (x)>.
  }
  chain outbound {
    # Allow all outbound traffic.
    type filter hook output priority 0
    policy accept
  }

}

# vim:set ts=2 sw=2 et:
